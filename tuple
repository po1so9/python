#######################################################################################################################

from collections import defaultdict

test_list = [(5, 6), (5, 7), (5, 8), (6, 10), (7, 13)]
# initializing list
# printing original list
print("The original list is : " + str(test_list))

# Join Tuples if similar initial element
# Using defaultdict() + loop
mapp = defaultdict(list)
for key, val in test_list:
    mapp[key].append(val)
res = [(key, *val) for key, val in mapp.items()]

# printing result
print("The extracted elements : " + str(res))

#######################################################################################################################

#t = input()
#a = tuple(int(x) for x in t.split())

# printing original tuple
#print("The original tuple : " + str(a))

# Adjacent element multiplication
# using tuple() + map() + lambda
#res = tuple(map(lambda i, j: i * j, a[1:], a[:-1]))

# printing result
#print("Resultant tuple after multiplication : " + str(res))


#######################################################################################################################




########################################################################################################################

#test_list = [(1, 3, 4), (2, 4, 6), (3, 8, 1)]

# printing original list
#print("The original list : " + str(test_list))

# initialize add element
#add_ele = 4

# Update each element in tuple list
# Using list comprehension
#res = [tuple(j + add_ele for j in sub) for sub in test_list]

# printing result
#print("List after bulk update : " + str(res))


########################################################################################################################



########################################################################################################################

#lst = []
#n = int(input("Enter the number of the elements in the list: "))
#for i in range(n):
#    ele = int(input(f"Enter the {i+1} element "))
#    lst.append(ele)
#test_tup=(1,5,7,9,5)

#lst += test_tup
#lst.sort()

#print(f"The container after the addition of the list and tuple: {lst}")


########################################################################################################################




########################################################################################################################

#list = []
#n = int(input("Enter the number of the elements in the list: "))
#for i in range(n):
#    ele = int(input(f"Enter the {i+1} element"))
#    list.append(ele)

#res = [(val, (val**3)) for val in list]
#print(res)


########################################################################################################################



########################################################################################################################


# initializing list
#test_list = [[('Gfg', 3), ('is', 3)], [('best', 1)], [('for', 5), ('geeks', 1)]]

# printing original list
#print("The original list is : " + str(test_list))

# initializing Custom eles.
#cus_eles = [6, 7, 8]


# Row-wise element Addition in Tuple Matrix
# Using enumerate() + list comprehension
#res = [[sub + (cus_eles[idx],) for sub in val] for idx, val in enumerate(test_list)]

# printing result
#print("The matrix after row elements addition : " + str(res))

########################################################################################################################



########################################################################################################################

#m = int(input("Enter the number of the elements in tuple: "))
#t = input()
#a = tuple(int(x) for x in t.split())
#view this tuple
#print(f"The original tuple is: {a}")

#th = sum(list(a))

#print(f"The summation of the tuple is: {th}")


######################################################################################################################


#Maximum and Minimum K elements in Tuple

#test_tup = (5, 20, 3, 7, 6, 8)

# printing original tuple
#print("The original tuple is : " + str(test_tup))

# initializing K
#K = 2

# Maximum and Minimum K elements in Tuple
# Using slicing + sorted()
#test_tup = list(test_tup)
#temp = sorted(test_tup)
#res = tuple(temp[:K] + temp[-K:])

# printing result
#print("The extracted values : " + str(res))


##################################################################################################################
